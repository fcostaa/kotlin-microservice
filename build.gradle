group 'com.felipecosta.microservice'
version '0.1'

buildscript {
    ext.kotlin_version = '1.1.2'

    repositories {
        jcenter()
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4'
}

apply plugin: 'kotlin'
apply plugin: "org.jetbrains.kotlin.kapt"
apply plugin: 'jacoco'

repositories {
    jcenter()
}

jar {
    manifest {
        attributes 'Implementation-Version': version,
                'Main-Class': "com.felipecosta.microservice.BootstrapKt"
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/*Module.*', // Modules for Dagger.
                    '**/*Dagger*.*', // Dagger auto-generated code.
                    '**/*MembersInjector*.*', // Dagger auto-generated code.
                    '**/*_Provide*Factory*.*',
                    '**/*_Factory.*', //Dagger auto-generated code
                    '**/*$*$*.*'
            ])
        })
    }
}

sourceSets {
    main.java.srcDirs += [file("$buildDir/generated/source/kapt/main")]
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "com.sparkjava:spark-core:2.3"
    compile "com.beust:klaxon:0.24"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "com.mitchellbosecke:pebble:2.1.0"

    compile 'com.google.dagger:dagger:2.4'
    kapt 'com.google.dagger:dagger-compiler:2.4'
    compileOnly 'javax.annotation:jsr250-api:1.0'

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile("com.nhaarman:mockito-kotlin:1.3.0") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:2.2.9"
}

task coverage(dependsOn: 'jacocoTestReport') << {
    def reports = new File(project.buildDir, '/reports/jacoco/test/html')
    def index = new File(reports, 'index.html').getText('UTF-8')
    def footer = '<div class="footer">'
    def result = new StringBuilder(index.substring(0, index.indexOf(footer)))

    reports.eachDirMatch({ !new File(it).name.startsWith(".") }) { dir ->
        def moduleIndex = new File(dir, 'index.source.html')
        def content = moduleIndex.getText('UTF-8')
                .replaceAll('\\.\\./\\.resources', '.resources')
                .replaceAll('href="', "href=\"${dir.name}/")
        result.append(content.substring(content.indexOf('<h1>'), content.indexOf(footer)))
    }
    result.append(index.substring(index.indexOf(footer)))

    def output = new File(reports, 'index.source.html')

    output.delete()
    output << result.toString()
    println("open $output.path")
}
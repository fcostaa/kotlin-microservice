buildscript {
    ext.kotlin_version = '1.1.51'
    ext.junitPlatformVersion = '1.0.1'

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion"
    }
}

ext.junit4Version = '4.12'
ext.junitVintageVersion = '4.12.1'
ext.junitJupiterVersion = '5.0.1'
ext.log4jVersion = '2.9.0'

allprojects {
    apply plugin: 'kotlin'
    apply plugin: 'jacoco'
    apply plugin: 'org.junit.platform.gradle.plugin'

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = "0.7.9"
        applyTo junitPlatformTest
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco/report.xml")
        }
    }

    junitPlatformTest {
        jacoco {
            destinationFile = file("$buildDir/jacoco/test.exec")
        }
    }

    dependencies {

        // JUnit Jupiter API and TestEngine implementation
        testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

        // If you also want to support JUnit 3 and JUnit 4 tests
        testCompile("junit:junit:${junit4Version}")
        testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")

        // To use Log4J's LogManager
        testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}")
        testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")

        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testCompile 'com.nhaarman:mockito-kotlin:1.3.0', { exclude group: 'org.jetbrains.kotlin' }
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/*Module.*', // Modules for Dagger.
                    '**/*Dagger*.*', // Dagger auto-generated code.
                    '**/*MembersInjector*.*', // Dagger auto-generated code.
                    '**/*_Provide*Factory*.*',
                    '**/*_Factory.*', //Dagger auto-generated code
                    '**/*$*$*.*'
            ])
        })
    }
}